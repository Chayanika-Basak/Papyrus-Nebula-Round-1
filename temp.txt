def extractPDF2(file_name, output_folder):
    try:
    # get base path.
        # base_path = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

        # Initial setup, create credentials instance.
        credentials = Credentials.service_account_credentials_builder() \
            .from_file("C:/Users/asus/Desktop/adobe_papyrus_nebulae/pdfservices-api-credentials.json") \
            .build()

        # Create an ExecutionContext using credentials and create a new operation instance.
        execution_context = ExecutionContext.create(credentials)
        extract_pdf_operation = ExtractPDFOperation.create_new()

        # Set operation input from a source file.
        source = FileRef.create_from_local_file("C:/Users/asus/Desktop/adobe_papyrus_nebulae/resources/" + file_name)
        extract_pdf_operation.set_input(source)

        # Build ExtractPDF options and set them into the operation
        extract_pdf_options: ExtractPDFOptions = ExtractPDFOptions.builder() \
            .with_elements_to_extract([ExtractElementType.TEXT, ExtractElementType.TABLES]) \
            .with_element_to_extract_renditions(ExtractRenditionsElementType.TABLES) \
            .with_table_structure_format(TableStructureType.CSV) \
            .build()
        extract_pdf_operation.set_options(extract_pdf_options)

        # Execute the operation.
        result: FileRef = extract_pdf_operation.execute(execution_context)

        # Save the result to the specified location.
        result.save_as("C:/Users/asus/Desktop/adobe_papyrus_nebulae/" + output_folder + "/ExtractTextTableWithFigureTableRendition.zip")
        with zipfile.ZipFile("C:/Users/asus/Desktop/adobe_papyrus_nebulae/" + output_folder + "/ExtractTextTableWithFigureTableRendition.zip", 'r') as zip_ref:
            zip_ref.extractall("C:/Users/asus/Desktop/adobe_papyrus_nebulae/" + output_folder)
        output = pd.read_excel('C:/Users/asus/Desktop/adobe_papyrus_nebulae/' + output_folder + '/tables/fileoutpart0.xlsx')
        print(output)
    except (ServiceApiException, ServiceUsageException, SdkException):
        logging.exception("Exception encountered while executing operation")